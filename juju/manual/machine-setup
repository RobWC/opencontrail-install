#!/usr/bin/python

import time
import subprocess
import paramiko

class Config(object):
    controller1 = {
        'address': '10.87.64.140',
        'hostname': '5b4s31',
        'username': 'root',
        'password': 'c0ntrail123',
        'data-address': '172.16.0.1'}
    controller2 = {
        'address': '10.87.64.141',
        'hostname': '5b4s32',
        'username': 'root',
        'password': 'c0ntrail123',
        'data-address': '172.16.0.2'}
    controller3 = {
        'address': '10.87.64.142',
        'hostname': '5b4s33',
        'username': 'root',
        'password': 'c0ntrail123',
        'data-address': '172.16.0.3'}
    compute1 = {
        'address': '10.87.64.143',
        'hostname': '5b4s34',
        'username': 'root',
        'password': 'c0ntrail123',
        'data-address': '172.16.0.4'}
    compute2 = {
        'address': '10.87.64.144',
        'hostname': '5b4s35',
        'username': 'root',
        'password': 'c0ntrail123',
        'data-address': '172.16.0.5'}

    controller = [controller1]
    compute = []

config = Config()

class Setup(object):
    def __init__(self):
        pass

    def image_server(self, server):
        cmd = 'cd /cs-shared/server-manager/client;' \
              'server-manager reimage --server_id %s ubuntu-14.04.2' \
              %(server['hostname'])
        subprocess.check_call(cmd, shell = True)
        print ''

    def connect(self, server):
        self.ssh = paramiko.SSHClient()
        self.ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        count = 0
        while True:
            print 'Connecting to server %s...%d' %(server['address'], count)
            try:
                self.ssh.connect(server['address'],
                        username = server['username'],
                        password = server['password'])
                break
            except:
                count += 1
                time.sleep(10)
        print '%s: Connected...' %(server['address'])
        self.sftp = self.ssh.open_sftp()

    def exec_cmd(self, cmd):
        stdin, stdout, stderr = self.ssh.exec_command(cmd)
        while True:
            line = stdout.readline()
            if not line:
                break
            print line.rstrip('\n')

    def copy_file(self, src, dst, mode = None):
        self.sftp.put(src, dst)
        if mode:
            cmd = '/bin/chmod %s %s' %(mode, dst)
            stdin, stdout, stderr = self.ssh.exec_command(cmd)

    def render_file(self, src, dst, vars):
        f_src = open(src)
        f_dst = self.sftp.open(dst, 'w')
        while True:
            line = f_src.readline()
            if not line:
                break
            for var_name in vars.keys():
                line = line.replace('__' + var_name + '__', vars[var_name])
            f_dst.write(line)
        f_src.close()
        f_dst.close()

    def setup_hosts(self, server):
        self.render_file('hosts', '/etc/hosts', server)

    def setup_ssh_key(self, server):
        cmd = 'mkdir -p /root/.ssh;'
        self.exec_cmd(cmd)
        self.copy_file('id_dsa.pub', '/root/.ssh/authorized_keys')

    def setup_apt_source(self, server):
        self.copy_file('sources.list', '/etc/apt/sources.list')
        cmd = '/usr/bin/apt-get update -q'
        self.exec_cmd(cmd)

    def setup_address_list(self, server):
        mgmt = self.sftp.open('/root/mgmt_addr_list', 'w')
        data = self.sftp.open('/root/data_addr_list', 'w')
        factor = int(server['data-address'].split('.')[3]) - 1
        start = 190 + 20 * factor
        for i in range(start, start + 20):
            mgmt.write('10.87.64.%d\n' %(i))
            data.write('172.16.0.%d\n' %(i))
        mgmt.close()
        data.close()

    def install_lxc(self, server):
        cmd = 'DEBIAN_FRONTEND=noninteractive ' \
              'apt-get install -y software-properties-common python-yaml lxc'
        self.exec_cmd(cmd)

    def setup_lxc_config(self, server):
        self.copy_file('ubuntu-cloud.trusty.conf',
                '/usr/share/lxc/config/ubuntu-cloud.trusty.conf')
        self.copy_file('multi-interface',
                '/usr/share/lxc/hooks/multi-interface', '0755')

    def setup_bonding(self, server):
        cmd = 'grep bonding /etc/modules'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)
        if not stdout.read():
            cmd = 'echo bonding >> /etc/modules'
            self.exec_cmd(cmd)
        cmd = 'lsmod | grep bonding'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)
        if not stdout.read():
            cmd = '/sbin/modprobe bonding'
            self.exec_cmd(cmd)

    def setup_controller_interface(self, server):
        cmd = '/bin/cat /sys/class/net/p514p1/address'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)
        mac = stdout.read().rstrip('\n')
        server['mac'] = mac
        self.render_file('interfaces-controller', '/etc/network/interfaces',
                server)
        cmd = 'ifdown -a && ifup -a'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)

    def setup_compute_interface(self, client, server):
        cmd = '/bin/cat /sys/class/net/p514p1/address'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)
        mac = stdout.read().rstrip('\n')
        server['mac'] = mac
        self.render_file('interfaces-compute', '/etc/network/interfaces',
                server)
        cmd = 'ifdown -a && ifup -a'
        stdin, stdout, stderr = self.ssh.exec_command(cmd)

    def setup_controller(self, server):
        self.connect(server)
        self.setup_lxc_config(server)
        return
        print '%s: Setup address lists...' %(server['address'])
        self.setup_address_list(server)
        print '%s: Update hosts...' %(server['address'])
        self.setup_hosts(server)
        print '%s: Setup SSH key...' %(server['address'])
        self.setup_ssh_key(server)
        print '%s: Update apt sources...' %(server['address'])
        self.setup_apt_source(server)
        print '%s: Install LXC...' %(server['address'])
        self.install_lxc(server)
        print '%s: Setup container configuration...' %(server['address'])
        self.setup_lxc_config(server)
        print '%s: Configure interfaces...' %(server['address'])
        self.setup_bonding(server)
        self.setup_controller_interface(server)
        self.ssh.close()
        print '%s: Disconnected...' %(server['address'])
        print ''

    def main(self):
        #for server in config.controller:
        #    self.image_server(server)
        #print 'Waiting for reboot...'
        #time.sleep(300)

        for server in config.controller:
            self.setup_controller(server)

if __name__ == '__main__':
    Setup().main()

